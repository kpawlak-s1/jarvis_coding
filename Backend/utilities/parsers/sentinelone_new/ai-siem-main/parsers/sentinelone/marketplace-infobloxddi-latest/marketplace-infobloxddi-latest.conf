{
  attributes: {
    "dataSource.category": "security",
    "dataSource.name": "Infoblox DDI",
    "dataSource.vendor": "Infoblox",
    "class_uid": 4003,
    "category_uid": 4,
    "severity_id": 0,
    "class_name": "DNS Activity",
    "category_name": "Network Activity",
    "metadata.product.name": "Infoblox DDI",
    "metadata.product.vendor_name": "Infoblox",
    "metadata.version":"1.1.0",
  },
  patterns: {
    tsPattern: "\\w+\\s+\\d+\\s+[0-9:]+"
  },
  formats: [
    {
      // CEF Dns Response
      format: ".*$timestamp=tsPattern$.*dst=$dst_endpoint.ip$ src=$src_endpoint.ip$ spt=$src_endpoint.port$ proto=$connection_info.protocol_name$ app=$app_name$ InfobloxDNSView=$unmapped.InfobloxDNSView$ destinationDnsDomain=$query.hostname$ InfobloxDNSQClass=$query.class$ InfobloxDNSQType=$query.type$ InfobloxDNSQFlags=$unmapped.InfobloxDNSQFlags$ InfobloxDNSRCode=$rcode$ msg=(\"|)$status_detail$(\"|) InfobloxAnCount=$unmapped.InfobloxAnCount$ InfobloxNsCount=$unmapped.InfobloxNsCount$ InfobloxArCount=$unmapped.InfobloxArCount$ InfobloxB1Region=$device.region$ InfobloxB1ConnectionType=$src_endpoint.name$ InfobloxB1OPHName=$src_endpoint.hostname$ InfobloxB1OPHIPAddress=$unmapped.InfobloxB1OPHIPAddress$ InfobloxB1Network=$unmapped.InfobloxB1Network$ suser=$actor.user.name$ dvchost=$device.name$ smac=$device.mac$ dvc=$device.ip$ InfobloxB1SrcOSVersion=$device.os.name$ InfobloxB1DHCPFingerprint=$unmapped.InfobloxB1DHCPFingerprint$ InfobloxB1DNSTags=$metadata.labels$"
      halt: true,
    }, 
    {
      // LEEF Dns Response
      format: ".*$timestamp=tsPattern$.*app=$app_name$    cat=(\"|)$cat$(\"|)    sev=$sev$    dst=$dst_endpoint.ip$    src=$src_endpoint.ip$    srcPort=$src_endpoint.port$    proto=$connection_info.protocol_name$    InfobloxDNSView=$unmapped.InfobloxDNSView$    url=$query.hostname$ InfobloxDNSQClass=$query.class$    InfobloxDNSQType=$query.type$    InfobloxDNSQFlags=$unmapped.InfobloxDNSQFlags$    InfobloxDNSRCode=$rcode$    msg=(\"|)$status_detail$(\"|)    InfobloxArCount=$unmapped.InfobloxArCount$    InfobloxB1Region=$device.region$    InfobloxB1ConnectionType=$src_endpoint.name$    InfobloxB1OPHName=$src_endpoint.hostname$ InfobloxB1OPHIPAddress=$unmapped.InfobloxB1OPHIPAddress$    InfobloxB1Network=$unmapped.InfobloxB1Network$    usrName=$actor.user.name$    identHostName=$device.name$    srcMAC=$device.mac$    InfobloxB1SrcOSVersion=$device.os.name$    InfobloxB1DHCPFingerprint=$unmapped.InfobloxB1DHCPFingerprint$ InfobloxB1DNSTags=$metadata.labels$"
      halt: true,
    },
    {
      // Generic format
      format: ".*$_=identifier$=$_=quoteOrSpace$.*",
      halt: true,
      repeat: true,
      rewrites: [
        {
          input: "message",
          output: "timestamp",
          match: "(\\w+\\s+\\d+\\s+[0-9:]+).*",
          replace: "$1"
        },
        {
          input: "message",
          output: "metadata.original_time",
          match: "(\\w+\\s+\\d+\\s+[0-9:]+).*",
          replace: "$1"
        },
      ],
    }
  ]
  mappings: {
    version: 0,
    mappings: [
      {
        predicate: "true",
        copies: [
          {inputs: ["ssrc"], output: "observables[0].value", type: "string"}
          {inputs: ["dst"], output: "observables[1].value", type: "string"}
          {inputs: ["destinationDnsDomain"], output: "observables[2].value", type: "string"}
          {inputs: ["suser"], output: "observables[3].value", type: "string"}
          {inputs: ["smac"], output: "observables[4].value", type: "string"}
        ]
        renames: [
          {inputs: ["metadata.labels"], output: "metadata.labels[0]", type: "string"}
          {inputs: ["timestamp"], output: "metadata.original_time", type: "string"}
          {inputs: ["app"], output: "app_name", type: "string"}
          {inputs: ["dst"], output: "dst_endpoint.ip", type: "string"}
          {inputs: ["src"], output: "src_endpoint.ip", type: "string"}
          {inputs: ["spt"], output: "src_endpoint.port", type: "string"}
          {inputs: ["srcPort"], output: "src_endpoint.port", type: "string"}
          {inputs: ["InfobloxDNSView"], output: "unmapped.InfobloxDNSView", type: "string"}
          {inputs: ["destinationDnsDomain"], output: "query.hostname", type: "string"}
          {inputs: ["url"], output: "query.hostname", type: "string"}
          {inputs: ["InfobloxDNSQClass"], output: "query.class", type: "string"}
          {inputs: ["InfobloxDNSQType"], output: "query.type", type: "string"}
          {inputs: ["InfobloxDNSQFlags"], output: "unmapped.InfobloxDNSQFlags", type: "string"}
          {inputs: ["proto"], output: "connection_info.protocol_name", type: "string"}
          {inputs: ["InfobloxDNSRCode"], output: "rcode", type: "string"}
          {inputs: ["msg"], output: "status_detail", type: "string"}
          {inputs: ["InfobloxArCount"], output: "unmapped.InfobloxArCount", type: "string"}
          {inputs: ["InfobloxAnCount"], output: "unmapped.InfobloxAnCount", type: "string"}
          {inputs: ["InfobloxNsCount"], output: "unmapped.InfobloxNsCount", type: "string"}
          {inputs: ["InfobloxB1Region"], output: "device.region", type: "string"}
          {inputs: ["InfobloxB1ConnectionType"], output: "src_endpoint.name", type: "string"}
          {inputs: ["InfobloxB1OPHName"], output: "src_endpoint.hostname", type: "string"}
          {inputs: ["InfobloxB1OPHIPAddress"], output: "unmapped.InfobloxB1OPHIPAddress", type: "string"}
          {inputs: ["InfobloxB1Network"], output: "unmapped.InfobloxB1Network", type: "string"}
          {inputs: ["suser"], output: "actor.user.name", type: "string"}
          {inputs: ["usrName"], output: "actor.user.name", type: "string"}
          {inputs: ["dvchost"], output: "device.name", type: "string"}
          {inputs: ["identHostName"], output: "device.name", type: "string"}
          {inputs: ["smac"], output: "device.mac", type: "string"}
          {inputs: ["srcMAC"], output: "device.mac", type: "string"}
          {inputs: ["InfobloxB1SrcOSVersion"], output: "device.os.name", type: "string"}
          {inputs: ["dvc"], output: "device.ip", type: "string"}
          {inputs: ["InfobloxB1DHCPFingerprint"], output: "unmapped.InfobloxB1DHCPFingerprint", type: "string"}
          
        ],
        constants: [
          { value: 2, field: "observables[0].type_id"}
          { value: "IP Address", field: "observables[0].type"}
          { value: "src_endpoint.ip", field: "observables[0].name"}
          { value: 2, field: "observables[1].type_id"}
          { value: "IP Address", field: "observables[1].type"}
          { value: "dst_endpoint.ip", field: "observables[1].name"}
          { value: 1, field: "observables[2].type_id"}
          { value: "Hostname", field: "observables[2].type"}
          { value: "query.hostname", field: "observables[2].name"}
          { value: 4, field: "observables[3].type_id"}
          { value: "User Name", field: "observables[3].type"}
          { value: "actor.user.name", field: "observables[3].name"}
          { value: 3, field: "observables[4].type_id"}
          { value: "MAC Address", field: "observables[4].type"}
          { value: "device.mac", field: "observables[4].name"}
          { value: "Response", field: "event.type", predicate: "message contains 'DNS Response'"}
          { value: "Response", field: "activity_name", predicate: "message contains 'DNS Response'"}
          { value: 2, field: "activity_id", predicate: "message contains 'DNS Response'"}
          { value: "DNS Activity: Response", field: "type_name", predicate: "message contains 'DNS Response'"}
          { value: 400302, field: "type_uid", predicate: "message contains 'DNS Response'"}
          { value: "Query", field: "event.type", predicate: "message contains 'DNS Query'"}
          { value: "Query", field: "activity_name", predicate: "message contains 'DNS Query'"}
          { value: 1, field: "activity_id", predicate: "message contains 'DNS Query'"}
          { value: "DNS Activity: Query", field: "type_name", predicate: "message contains 'DNS Query'"}
          { value: 400301, field: "type_uid", predicate: "message contains 'DNS Query'"}
        ]
      },
    ]
  }
}
