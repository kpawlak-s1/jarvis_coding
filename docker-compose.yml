version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Backend/api/Dockerfile
    container_name: jarvis-api
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - LOG_LEVEL=info
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      # Authentication settings
      - DISABLE_AUTH=${DISABLE_AUTH:-false}
      - API_KEYS_ADMIN=${API_KEYS_ADMIN}
      - API_KEYS_READ_ONLY=${API_KEYS_READ_ONLY}
      - API_KEYS_WRITE=${API_KEYS_WRITE}
      # SentinelOne integration
      - S1_HEC_TOKEN=${S1_HEC_TOKEN}
      - S1_SDL_API_TOKEN=${S1_SDL_API_TOKEN}
      # Database
      - DATABASE_URL=sqlite+aiosqlite:///./data/jarvis_coding.db
    volumes:
      - ./Backend/event_generators:/app/event_generators:ro
      - ./Backend/parsers:/app/parsers:ro
      - ./Backend/scenarios:/app/scenarios:ro
      - ./Backend/api/data:/app/data
    restart: unless-stopped
    networks:
      - jarvis-network

  frontend:
    build:
      context: .
      dockerfile: Frontend/Dockerfile
    container_name: jarvis-frontend
    ports:
      - "9001:8000"
    environment:
      - API_BASE_URL=http://api:8000
      - BACKEND_API_KEY=${BACKEND_API_KEY}
      - S1_HEC_BATCH=${S1_HEC_BATCH}
      - S1_HEC_BATCH_MAX_BYTES=${S1_HEC_BATCH_MAX_BYTES}
      - S1_HEC_BATCH_FLUSH_MS=${S1_HEC_BATCH_FLUSH_MS}
      - S1_HEC_DEBUG=${S1_HEC_DEBUG}
      - PYTHON_KEYRING_BACKEND=keyrings.alt.file.EncryptedKeyring
      - KEYRING_CRYPTFILE_PASSWORD=${KEYRING_CRYPTFILE_PASSWORD}
      - KEYRING_CRYPTFILE_PATH=${KEYRING_CRYPTFILE_PATH}
    volumes:
      - ./Frontend:/app/Frontend
      - ./Backend:/app/Backend:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - jarvis-network

networks:
  jarvis-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
